import cv2
import numpy as np
from sklearn.cluster import KMeans

# Load the pre-trained Haar cascades for face, eyes, mouth, and hair
detector_face = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
detector_eye = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
detector_mouth = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')
detector_hair = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')  # Approximate hair region

# Function to detect the dominant color
def get_dominant_color(region, n_colors=1):
    pixels = region.reshape(-1, 3)
    pixels = np.float32(pixels)
    kmeans = KMeans(n_clusters=n_colors, random_state=0, n_init=10).fit(pixels)
    dominant_colors = kmeans.cluster_centers_
    return [tuple(map(int, color)) for color in dominant_colors]

# Function to suggest multiple dress colors based on extracted features
def suggest_dress_colors(face_color, eye_color, lip_color, hair_color):
    avg_color = np.mean([face_color, eye_color, lip_color, hair_color], axis=0).astype(int)
    complementary_colors = [(255 - avg_color[0], 255 - avg_color[1], 255 - avg_color[2]),
                            (avg_color[0] // 2, avg_color[1] // 2, avg_color[2] // 2),
                            (min(avg_color[0] + 50, 255), min(avg_color[1] + 50, 255), min(avg_color[2] + 50, 255))]
    return [tuple(map(int, color)) for color in complementary_colors]

# Open the webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = detector_face.detectMultiScale(gray, 1.3, 5)
    
    for (x, y, w, h) in faces:
        face_roi = frame[y:y+h, x:x+w]
        face_color = get_dominant_color(face_roi)[0]
        
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = frame[y:y+h, x:x+w]
        
        eyes = detector_eye.detectMultiScale(roi_gray, 1.1, 10)
        eye_color = (0, 0, 0)
        for (ex, ey, ew, eh) in eyes:
            eye_roi = roi_color[ey:ey+eh, ex:ex+ew]
            eye_color = get_dominant_color(eye_roi)[0]
            break  # Take the first detected eye color
        
        mouths = detector_mouth.detectMultiScale(roi_gray, 1.5, 20)
        lip_color = (0, 0, 0)
        for (mx, my, mw, mh) in mouths:
            if my > h // 2:
                mouth_roi = roi_color[my:my+mh, mx:mx+mw]
                lip_color = get_dominant_color(mouth_roi)[0]
                break  # Take the first detected lip color
        
        hair_roi = frame[max(0, y - h//2):y, x:x+w]  # Approximate hair region
        hair_color = get_dominant_color(hair_roi)[0]
        
        dress_colors = suggest_dress_colors(face_color, eye_color, lip_color, hair_color)
        
        cv2.rectangle(frame, (x, y), (x+w, y+h), face_color, 2)
        for i, color in enumerate(dress_colors):
            cv2.putText(frame, f'Dress Color {i+1}: {color}', (x, y - 40 - (i * 20)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    
    cv2.imshow('Face, Eyes, Lips & Hair Detection with Dress Color Suggestion', frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
